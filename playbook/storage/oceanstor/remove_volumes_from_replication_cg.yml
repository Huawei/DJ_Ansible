---

# Required Parameters:
#   cgName:            consistency group name
#   primaryVolumes:    a list of primary volume names
#   secondaryVolumes:  a list of secondary volume names, must be the same number of volumes with the primary volumes
#
# Examples:
#   --extra-vars '{"cgName": "cg1", "primaryVolumes": ["DJ_AT_0002", "DJ_AT_0003"], "secondaryVolumes": ["DJ_BC_0002", "DJ_BC_0003"]}'
#
# Optional Parameters:
#   deletePairs:       delete pairs after remove from CG, default: yes, options: yes, no
#
- name: Remove Volumes from Replication Consistency Group
  hosts: localhost
  vars:
    deletePairs: yes
  vars_files:
    - ../../global.yml
  gather_facts: no
  become: no
  tasks:
    - import_tasks: check_volume_pairs.yml
      vars:
        primaryVolumes: "{{primaryVolumes}}"
        secondaryVolumes: "{{secondaryVolumes}}"

    - name: Set primary storage SN
      set_fact:
        deviceSn: "{{ devicePair.primary }}"

    - import_tasks: login_storage.yml

    - name: Query Replication CG
      uri:
        url: "https://{{deviceHost}}:{{devicePort}}/deviceManager/rest/{{deviceSn}}/CONSISTENTGROUP?filter=NAME%3A%3A{{cgName|urlencode}}"
        method: GET
        validate_certs: no
        headers:
          Accept: "application/json"
          Content-Type: "application/json;charset=utf8"
          iBaseToken: "{{ deviceToken }}"
          Cookie: "session={{ deviceSession }}"
      register: ReplicationCG

    - name: Get Replication CG ID
      set_fact:
        cgId: "{{ ReplicationCG.json.data[0].ID }}"
      failed_when: ReplicationCG.json.data | length != 1

    - name: Show Replication CG ID
      debug:
        msg: 
          cgId: "{{ cgId }}"

    - name: Query Replication Pairs
      uri:
        url: "https://{{deviceHost}}:{{devicePort}}/deviceManager/rest/{{deviceSn}}/REPLICATIONPAIR?filter=CGID%3A%3A{{cgId}}"
        method: GET
        validate_certs: no
        headers:
          Accept: "application/json"
          Content-Type: "application/json;charset=utf8"
          iBaseToken: "{{ deviceToken }}"
          Cookie: "session={{ deviceSession }}"
      register: ReplicationPairs

    - name: Get Replication Pair IDs
      vars:
        query: "[? LOCALRESID=='{{item.LOCALOBJID}}' && REMOTERESID=='{{item.REMOTEOBJID}}'].ID"
        pairId: "{{ ReplicationPairs.json.data | json_query(query) | first }}"
      set_fact:
        pairIds: "{{ pairIds|default([]) + [pairId] }}"
      with_items: "{{ volumePairs }}"

    - name: Show Replication Pair IDs
      debug:
        msg: 
          pairIds: "{{ pairIds }}"

    - name: Pause Replication CG
      uri:
        url: "https://{{deviceHost}}:{{devicePort}}/deviceManager/rest/{{deviceSn}}/SPLIT_CONSISTENCY_GROUP"
        method: PUT
        validate_certs: no
        headers:
          Accept: "application/json"
          Content-Type: "application/json;charset=utf8"
          iBaseToken: "{{ deviceToken }}"
          Cookie: "session={{ deviceSession }}"
        body_format: json
        body:
          ID: "{{ cgId }}"
      register: SPLIT_CG

    - name: Show Pause Results
      debug:
        msg: "{{ SPLIT_CG.json.error }}"

    - name: Remove Replication Pairs from CG
      uri:
        url: "https://{{deviceHost}}:{{devicePort}}/deviceManager/rest/{{deviceSn}}/DEL_MIRROR"
        method: PUT
        validate_certs: no
        headers:
          Accept: "application/json"
          Content-Type: "application/json;charset=utf8"
          iBaseToken: "{{ deviceToken }}"
          Cookie: "session={{ deviceSession }}"
        body_format: json
        body:
          ID: "{{ cgId }}"
          RMLIST:
            - "{{ item }}"
      register: REMOVE_PAIRS
      with_items: "{{ pairIds }}"
      when: pairIds|length > 0

    - name: Show Remove Pair Results
      vars:
        queryError: "[*].json.error"
      debug:
        msg: "{{ REMOVE_PAIRS.results | json_query(queryError) }}"
      when: pairIds|length > 0

    - name: Sync Replication CG
      uri:
        url: "https://{{deviceHost}}:{{devicePort}}/deviceManager/rest/{{deviceSn}}/SYNCHRONIZE_CONSISTENCY_GROUP"
        method: PUT
        validate_certs: no
        headers:
          Accept: "application/json"
          Content-Type: "application/json;charset=utf8"
          iBaseToken: "{{ deviceToken }}"
          Cookie: "session={{ deviceSession }}"
        body_format: json
        body:
          ID: "{{ cgId }}"
      register: SYNC_CG

    - name: Check Sync Results
      debug:
        msg: "{{ SYNC_CG.json.error }}"

    - name: Delete Replication Pairs
      uri:
        url: "https://{{deviceHost}}:{{devicePort}}/deviceManager/rest/{{deviceSn}}/REPLICATIONPAIR/{{item}}"
        method: DELETE
        validate_certs: no
        headers:
          Accept: "application/json"
          Content-Type: "application/json;charset=utf8"
          iBaseToken: "{{ deviceToken }}"
          Cookie: "session={{ deviceSession }}"
      register: DELETE_PAIRS
      with_items: "{{ pairIds }}"
      when: deletePairs and pairIds|length > 0

    - name: Show Delete Pair Results
      vars:
        queryError: "[*].json.error"
      debug:
        msg: "{{ DELETE_PAIRS.results | json_query(queryError) }}"
      when: deletePairs and pairIds|length > 0

    - name: Sync Replication Pairs
      uri:
        url: "https://{{deviceHost}}:{{devicePort}}/deviceManager/rest/{{deviceSn}}/REPLICATIONPAIR/sync"
        method: PUT
        validate_certs: no
        headers:
          Accept: "application/json"
          Content-Type: "application/json;charset=utf8"
          iBaseToken: "{{ deviceToken }}"
          Cookie: "session={{ deviceSession }}"
        body_format: json
        body:
          ID: "{{ item }}"
      register: SYNC_PAIRS
      with_items: "{{ pairIds }}"
      when: not deletePairs and pairIds|length > 0

    - name: Show Sync Pair Results
      vars:
        queryError: "[*].json.error"
      debug:
        msg: "{{ SYNC_PAIRS.results | json_query(queryError) }}"
      when: not deletePairs and pairIds|length > 0