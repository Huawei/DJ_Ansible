---

# Required Parameters:
#   deviceName:        storage device name, can be replaced with deviceSn
#   pgName:            protection group name
#
# Examples:
#   --extra-vars "deviceName='storage1' pgName='pg1'"
#
# Optional Parameters:
#   deviceSn:          storage device SN
#
# Examples:
#   --extra-vars "deviceSn='12323019876312325911' pgName='pg1'"

- name: Delete Protection Group
  hosts: localhost
  vars_files:
    - ../../../global.yml
  gather_facts: no
  become: no
  tasks:
    - import_tasks: ../login_storage.yml

    - name: Query PG
      uri:
        url: "https://{{deviceHost}}:{{devicePort}}/api/v2/protectgroup?filter=protectGroupName%3A%3A{{pgName|urlencode}}"
        method: GET
        validate_certs: no
        headers:
          Accept: "application/json"
          Content-Type: "application/json;charset=utf8"
          iBaseToken: "{{ deviceToken }}"
          Cookie: "session={{ deviceSession }}"
      register: PG
      failed_when: PG.json.data is not defined

    - name: Check Replicas
      vars:
        pg: "{{ PG.json.data[0] }} "
        replicaNum: "{{ pg.cdpGroupNum|int + pg.cloneGroupNum|int + pg.replicationGroupNum|int + pg.snapshotGroupNum|int + pg.drStarNum|int +pg.hyperMetroGroupNum|int}}"
      fail: 
        msg: "Cannot be deleted, replicas exists"
      when: replicaNum|int > 0

    - name: Get PG ID
      vars:
        pg: "{{ PG.json.data[0] }} "
      set_fact:
        pgId: "{{ pg.protectGroupId }}"
        lunNum: "{{ pg.lunNum }}"

    - name: Show PG ID
      debug:
        msg: 
          pgId: "{{ pgId }}"

    - name: Query Volumes in PG
      uri:
        url: "https://{{deviceHost}}:{{devicePort}}/deviceManager/rest/{{deviceSn}}/lun/associate?ASSOCIATEOBJTYPE=57846&ASSOCIATEOBJID={{pgId}}&range=[0-{{lunNum}}]"
        method: GET
        validate_certs: no
        headers:
          Accept: "application/json"
          Content-Type: "application/json;charset=utf8"
          iBaseToken: "{{ deviceToken }}"
          Cookie: "session={{ deviceSession }}"
      register: VOLUMES
      when: lunNum|int > 0

    - name: Get Volume IDs
      vars:
        query: "[*].ID"
      set_fact:
        volumeIds: "{{ VOLUMES.json.data | json_query(query) }}"
      when: lunNum|int > 0

    - name: Remove Volumes from PG
      uri:
        url: "https://{{deviceHost}}:{{devicePort}}/api/v2/protectgroup/associate?protectGroupId={{pgId}}&ASSOCIATEOBJTYPE=11&ASSOCIATEOBJID={{item}}"
        method: DELETE
        validate_certs: no
        headers:
          Accept: "application/json"
          Content-Type: "application/json;charset=utf8"
          iBaseToken: "{{ deviceToken }}"
          Cookie: "session={{ deviceSession }}"
      register: REMOVE_VOLUMES
      with_items: "{{ volumeIds }}"
      when: lunNum|int > 0

    - name: Show Remove Volume Results
      vars:
        queryError: "[*].json.error"
      debug:
        msg: "{{ REMOVE_VOLUMES.results | json_query(queryError) }}"
      when: lunNum|int > 0

    - name: Delete PG
      uri:
        url: "https://{{deviceHost}}:{{devicePort}}/api/v2/protectgroup/{{pgId}}"
        method: DELETE
        validate_certs: no
        headers:
          Accept: "application/json"
          Content-Type: "application/json;charset=utf8"
          iBaseToken: "{{ deviceToken }}"
          Cookie: "session={{ deviceSession }}"
      register: DELETE_PG

    - name: Show Delete PG Results
      debug:
        msg: "{{ DELETE_PG.json.error }}"