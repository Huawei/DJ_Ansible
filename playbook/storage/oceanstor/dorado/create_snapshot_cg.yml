---

# Required Parameters:
#   deviceName:        storage device name, can be replaced with deviceSn
#   pgName:            protection group name
#
# Examples:
#   --extra-vars "deviceName='storage1' pgName='pg1'"

# Optional Parameters:
#   deviceSn:          storage device SN
#   cgName:            snapshot consistency group name, default: pgName_YYYYMMDDHH24MISS
#
# Examples:
#   --extra-vars "deviceSn='12323019876312325911' pgName='pg1' cgName='pg1_20200204'"


- name: Create Snapshot Consistency Group
  hosts: localhost
  vars:
    cgName: "{{ pgName }}_{{ ansible_date_time.iso8601_basic_short }}"
  vars_files:
    - ../../../global.yml
  gather_facts: yes
  become: no
  tasks:
    - import_tasks: ../login_storage.yml

    - name: Query PG
      uri:
        url: "https://{{deviceHost}}:{{devicePort}}/api/v2/protectgroup?filter=protectGroupName%3A%3A{{pgName|urlencode}}"
        method: GET
        validate_certs: no
        headers:
          Accept: "application/json"
          Content-Type: "application/json;charset=utf8"
          iBaseToken: "{{ deviceToken }}"
          Cookie: "session={{ deviceSession }}"
      register: PG
      failed_when: PG.json.data is not defined

    - name: Get PG ID
      vars:
        pg: "{{ PG.json.data[0] }} "
      set_fact:
        pgId: "{{ pg.protectGroupId }}"

    - name: Show PG ID
      debug:
        msg: 
          pgId: "{{ pgId }}"

    - name: Create Snapshot CG
      uri:
        url: "https://{{deviceHost}}:{{devicePort}}/deviceManager/rest/{{deviceSn}}/SNAPSHOT_CONSISTENCY_GROUP"
        method: POST
        validate_certs: no
        headers:
          Accept: "application/json"
          Content-Type: "application/json;charset=utf8"
          iBaseToken: "{{ deviceToken }}"
          Cookie: "session={{ deviceSession }}"
        body_format: json
        body:
          NAME: "{{ cgName }}"
          PARENTID: "{{ pgId }}"
      register: SNAP_CG

    - name: Show Snapshot CG
      debug:
        msg: "{{ SNAP_CG.json }}"