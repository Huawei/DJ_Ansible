# Check volumes affinity
# Include this check tasks before local protection operations
#
# Required Parameters:
#   volumes:    a list of volume names
#
# Examples:
#   - import_tasks: check_volume_affinity.yml
#     vars:
#       volumes: ["DJ_AT_0002", "DJ_AT_0003"]
#
# Outputs:
#   deviceSn:        device SN
#   volumeIds:       a list of volume IDs
#   

- import_tasks: ../../user/login.yml

- name: Get Volumes
  uri:
    url: "https://{{DJ.host}}:{{DJ.port}}/rest/{{ URI.volumes }}?name={{item|urlencode}}"
    method: GET
    validate_certs: no
    headers:
      Accept: "application/json"
      Content-Type: "application/json;charset=utf8"
      X-Auth-Token: "{{DJ.token}}"
  register: VOLUMES
  with_items: "{{ volumes }}"

- name: Get Storage SN and Volume IDs
  vars:
    queryStorageSn:  "[? name=='{{item.1}}'].storage_sn"
    queryVolumeId: "[? name=='{{item.1}}'].volume_raw_id"
  set_fact:
    deviceSns: "{{ deviceSns|default([]) + VOLUMES.results[item.0].json.volumes | json_query(queryStorageSn) }}"
    volumeIds: "{{ volumeIds|default([]) + VOLUMES.results[item.0].json.volumes | json_query(queryVolumeId) }}"
  with_indexed_items: "{{ volumes }}"

- name: Check Affinity
  set_fact:
    deviceSn: "{{ deviceSns | unique | first }}"
  failed_when: deviceSns | unique | length != 1

- name: Show Volume IDs
  debug:
    msg: 
      deviceSn: "{{deviceSn}}"
      volumeIds: "{{volumeIds}}"