---

# Required Parameters:
#   volumeName:      volume fuzzy name, can be instead with volumeIds
#   hostName:        host name, can be instead with hostId
#
# Examples:
# --extra-vars "volumeName='ansibleC_' hostName='79rbazhs'"
#
# Generated Parameters (can be overwritten):
#   volumeIds:       a list of volume IDs
#   hostId:          host ID
#
# Examples:
# --extra-vars '{"volumeIds": ["9bff610a-6b5b-42db-87ac-dc74bc724525","507dcef9-205a-405c-a794-e791330560a1"]}' \
# --extra-vars "hostId='32fb302d-25cb-4e4b-83d6-03f03498a69b'"

- name: Attach Volumes to Host
  hosts: localhost
  vars_files:
    - ../global.yml
  gather_facts: no
  become: no
  tasks:
    - import_tasks: ../user/login.yml
    
    - name: Get Volumes by Fuzzy Name
      uri:
        url: "https://{{DJ.host}}:{{DJ.port}}/rest/{{ URI.volumes }}?limit=1000&start=0&name={{volumeName|urlencode}}"
        method: GET
        validate_certs: no
        headers:
          Accept: "application/json"
          Content-Type: "application/json;charset=utf8"
          X-Auth-Token: "{{DJ.token}}"
      register: VOLUMES
      when: volumeName is defined

    - name: Get Volume ID List
      set_fact:
        volumeIds: "{{ VOLUMES.json.volumes | json_query('[*].id') }}"
      failed_when: VOLUMES.json.volumes | length < 1
      when: volumeName is defined

    - name: Get Host by name
      uri:
        url: "https://{{DJ.host}}:{{DJ.port}}/rest/{{ URI.hosts }}/summary"
        method: POST
        validate_certs: no
        headers:
          Accept: "application/json"
          Content-Type: "application/json;charset=utf8"
          X-Auth-Token: "{{DJ.token}}"
        body_format: json
        body:
          name: "{{hostName}}"
      register: HOSTS
      when: hostName is defined

    - name: Get Host ID
      vars:
        query: "[?name=='{{ hostName }}'].id"
      set_fact:
        hostId: "{{ HOSTS.json.hosts | json_query(query) | first }}"
      failed_when: HOSTS.json.hosts | json_query(query) | length != 1
      when: hostName is defined

    - name: Show Param
      debug:
        msg:
          volume_ids: "{{ volumeIds }}"
          host_id: "{{ hostId }}"

    - name: Attach Volumes
      vars:
        query: "[?name=='{{ hostName }}'].id"
        hostId: "{{ HOSTS.json.hosts | json_query(query) | first }}"
      uri:
        url: "https://{{DJ.host}}:{{DJ.port}}/rest/{{ URI.volumes }}/host-mapping"
        method: POST
        validate_certs: no
        headers:
          Accept: "application/json"
          Content-Type: "application/json;charset=utf8"
          X-Auth-Token: "{{DJ.token}}"
        status_code: 202
        body_format: json
        body: 
          volume_ids: "{{ volumeIds }}"
          host_id: "{{ hostId }}"
      register: ATTACH_VOLUME

    - name: Wait Task Complete
      uri:
        url: "https://{{DJ.host}}:{{DJ.port}}/rest/{{ URI.tasks }}/{{ ATTACH_VOLUME.json.task_id }}"
        method: GET
        validate_certs: no
        headers:
          Accept: "application/json"
          Content-Type: "application/json;charset=utf8"
          X-Auth-Token: "{{DJ.token}}"
      register: TASKS
      vars:
        query: "[?id=='{{ ATTACH_VOLUME.json.task_id }}'].status"
      retries: 60
      delay: 5                      
      until: (TASKS.json | json_query(query) | first | int) not in [1, 2]    # 1/not_start, 2/running, 3/succeeded, 4/partially_succeeded, 5/failed, 6/timeout

    - name: Task Details
      vars:
        statusMap: { '1': 'Not Start', '2': 'Running', '3': 'Succeeded', '4': 'Partially Succeeded', '5': 'Failed', '6': 'Timeout'}
        query: "[?id=='{{ ATTACH_VOLUME.json.task_id }}'].status"
        status: "{{ TASKS.json | json_query(query) | first }}"
      debug:
        msg: 
          Detail: "{{ TASKS.json }}"
          Result: "{{statusMap[status]}}"
