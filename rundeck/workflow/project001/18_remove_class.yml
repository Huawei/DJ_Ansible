- name: Remove Performance Class
  hosts: localhost
  vars_files:
    - ../../../config/global.yml
    - ../../../config/project001.yml
  gather_facts: no
  become: no
  tasks:
    - set_fact:
        selectedLunNames: "{{ Select_LUN.split(',') if (Select_LUN is not none) else [] }}"
        storageSn: "{{ Storage_Sn | string }}"

    - block:
        - name: Read LUN name from upload file
          read_csv:
            path: "{{ Upload_LUN }}"
            delimiter: "{{ Delimiter | default(',') }}"
          register: UPLOAD_LUNS

        - set_fact:
            selectedLunNames: "{{ selectedLunNames + UPLOAD_LUNS.list | json_query('[*].name') }}"

      when: Upload_LUN is not none

    - name: Check LUNs on DJ
      debug:
        msg:
          volumeNames: "{{ selectedLunNames }}"
      failed_when: selectedLunNames|length == 0

    - import_tasks: "{{GLOBAL.baseDir}}/task/user/login.yml"

    - name: Get Stroage By Sn
      uri:
        url: "https://{{djHost}}:{{djPort}}{{ DJSERVICE.API.storages }}?start=1&limit=1000"
        method: GET
        validate_certs: no
        headers:
          Accept: "application/json"
          Content-Type: "application/json;charset=utf8"
          X-Auth-Token: "{{djToken}}"
      register: DEVICES

    - name: Check Storage Exists
      vars:
        query: "[?sn=='{{ storageSn }}'].id"
      set_fact:
        deviceId: "{{ DEVICES.json.datas | json_query(query) | first }}"
      failed_when: DEVICES.json.datas | json_query(query) | length != 1
      when:
        - storageSn is defined
        - storageSn is not none
        - storageSn != DEFAULT.noneValue

    - import_tasks: "{{GLOBAL.baseDir}}/task/volume/check_volumes.yml"
      vars:
        volumeNames: "{{ selectedLunNames }}"
        filterDeviceId: "{{ deviceId }}"

    - set_fact:
        storageSns: "{{ checkedVolumes | json_query('[*].storage_sn') | unique }}"
        storageLunNames: {}
        newStorageLunNames: {}
        newLunNames: []
        newStorageLunNameTemplate: "%s%s%s"

    - set_fact:
        storageLunNames: "{{ storageLunNames | combine({item: checkedVolumes | json_query(queryLunName) }) }}"
      vars:
        queryLunName: "[? storage_sn=='{{item}}'].name"
      with_items: "{{ storageSns }}"

    - set_fact:
        newLunNames: "{{ newLunNames + [ newStorageLunNameTemplate | format(lunNamePrefix, '0', lunNameSuffix) ] }}"
      vars:
        lunNamePrefix: "{{ item | regex_replace('(.*_)[A-D|0](_.*)', ('\\1')) }}"
        lunNameSuffix: "{{ item | regex_replace('(.*_)[A-D|0](_.*)', ('\\2')) }}"
      with_items: "{{ selectedLunNames }}"

    - set_fact:
        newStorageLunNames: "{{ newStorageLunNames | combine({item: newStorageLunNameTemplate | format(newStorageLunNamePrefix, '0', newStorageLunNameSuffix) }) }}"
      vars:
        newStorageLunNamePrefix: "{{ storageLunNames[item]| regex_replace('(.*_)[A-D](_.*)', ('\\1')) }}"
        newStorageLunNameSuffix: "{{ storageLunNames[item]| regex_replace('(.*_)[A-D](_.*)', ('\\2')) }}"
      with_items: "{{ storageSns }}"

    - set_fact:
        volumesInTier: "{{ checkedVolumes | json_query(queryVolumesInTier) }}"
        volumesNotInTier: "{{ checkedVolumes | json_query(queryVolumesNotInTier) }}"
      vars:
        queryVolumesInTier: "[? service_level_name != '' && service_level_name != null ].name"
        queryVolumesNotInTier: "[? service_level_name == '' || service_level_name == null ].name"

    - import_tasks: "{{GLOBAL.baseDir}}/task/volume/remove_volumes_from_tier.yml"
      vars:
        volumeNames: "{{ volumesInTier }}"
        disableQos: "{{ Disable_QoS }}"
        filterDeviceId: "{{ deviceId }}"
      when: volumesInTier|length > 0

    - import_tasks: "{{GLOBAL.baseDir}}/task/volume/disable_volumes_qos.yml"
      vars:
        volumeNames: "{{ volumesNotInTier }}"
      when:
        - volumesNotInTier|length > 0
        - Disable_QoS|bool == True

    - name: Modify LUN Names
      debug:
        msg:
          lunNames: "{{ selectedLunNames }}"
          newLunNames: "{{ newLunNames }}"
          deviceSn: "{{ storageSn }}"

    - set_fact:
        deviceSn: "{{ storageSn }}"

    - include_tasks: "{{GLOBAL.baseDir}}/task/storage/oceanstor/login_storage.yml"
    - include_tasks: "{{GLOBAL.baseDir}}/task/storage/oceanstor/modify_lun.yml"
      vars:
        lunName: "{{ selectedLunNames[i] }}"
        newLunName: "{{ newLunNames[i] }}"
      loop: "{{ range(0, selectedLunNames|length) | list }}"
      loop_control:
        loop_var: i

    - include_tasks: "update_lun_kpi_table.yml"
      vars:
        queryDeviceName: "[? sn=='{{checkedVolumes[item.0].storage_sn}}'].name"
        queryDeviceSite: "[? sn=='{{checkedVolumes[item.0].storage_sn}}'].site"
        osType: "{{ item.1.split('_')[1] }}"
        systemName: "{{ item.1.split('_')[0] }}_{{osType}}_{{ item.1.split('_')[2] }}_{{ item.1.split('_')[3][0] }}"
        TYPE_OF_OPERATION: "modify"
        WBE_CODE: "{{ WBE_CODE }}"
        TICKET_NUMBER: "{{ TICKET_NUMBER }}"
        SYSTEM_NAME: "{{ systemName if checkedVolumes[item.0].attached else '' }}"
        SITE: "{{ STORAGES | json_query(queryDeviceSite) | first }}"
        ENVIRONMENT: "{{ osType }}"
        STORAGE_CLASS: "{{ checkedVolumes[item.0].service_level_name }}"
        CAPACITY_GB: "-{{ checkedVolumes[item.0].capacity }}"
        STORAGE: "{{ STORAGES | json_query(queryDeviceName) | first }}"
        VDISK_UID: "{{ checkedVolumes[item.0].volume_raw_id }}"
      with_indexed_items: "{{ selectedLunNames }}"

    - include_tasks: "update_lun_kpi_table.yml"
      vars:
        queryDeviceName: "[? sn=='{{checkedVolumes[item.0].storage_sn}}'].name"
        queryDeviceSite: "[? sn=='{{checkedVolumes[item.0].storage_sn}}'].site"
        osType: "{{ item.1.split('_')[1] }}"
        systemName: "{{ item.1.split('_')[0] }}_{{osType}}_{{ item.1.split('_')[2] }}_{{ item.1.split('_')[3][0] }}"
        TYPE_OF_OPERATION: "modify"
        WBE_CODE: "{{ WBE_CODE }}"
        TICKET_NUMBER: "{{ TICKET_NUMBER }}"
        SYSTEM_NAME: "{{ systemName if checkedVolumes[item.0].attached else '' }}"
        SITE: "{{ STORAGES | json_query(queryDeviceSite) | first }}"
        ENVIRONMENT: "{{ osType }}"
        STORAGE_CLASS: ""
        CAPACITY_GB: "{{ checkedVolumes[item.0].capacity }}"
        STORAGE: "{{ STORAGES | json_query(queryDeviceName) | first }}"
        VDISK_UID: "{{ checkedVolumes[item.0].volume_raw_id }}"
      with_indexed_items: "{{ selectedLunNames }}"

    - import_tasks: "{{GLOBAL.baseDir}}/task/storage/sync_storage.yml"