# Check Protection Group
#
# Required parameters:
#   pgName:                 # Protection Group Name, can be replaced with pgId
#
# Optional parameters:
#   pgId:                   # Protection Group ID
# 
# Generated variables:
#   checkedPg:              # Checked Protection Groups

- set_fact:
    checkedPg: "{{ none }}"

- block:
    - name: Query PG by Name
      uri:
        url: "https://{{deviceHost}}:{{devicePort}}/deviceManager/rest/{{deviceSn}}/protectgroup?filter=protectGroupName%3A%3A{{pgName|urlencode}}"
        method: GET
        validate_certs: no
        headers:
          Accept: "application/json"
          Content-Type: "application/json;charset=utf8"
          iBaseToken: "{{ deviceToken }}"
          Cookie: "session={{ deviceSession }}"
      register: PG

    - name: Get PG ID
      vars:
        queryPgIds: "[? protectGroupName=='{{pgName}}'].protectGroupId"
        pgIds: "{{ PG.json.data | default([]) | json_query(queryPgIds) }}"
      set_fact:
        pgId: "{{ pgIds | first }}"
      failed_when: pgIds | length != 1

  when: pgName|default(none) is not none


- name: Query PG Details
  uri:
    url: "https://{{deviceHost}}:{{devicePort}}/deviceManager/rest/{{deviceSn}}/protectgroup/{{pgId}}"
    method: GET
    validate_certs: no
    headers:
      Accept: "application/json"
      Content-Type: "application/json;charset=utf8"
      iBaseToken: "{{ deviceToken }}"
      Cookie: "session={{ deviceSession }}"
  register: DETAIL
  failed_when: (DETAIL.json.error.code != 0) or ('data' not in DETAIL.json )

- set_fact:
    checkedPg: "{{ DETAIL.json.data }}"