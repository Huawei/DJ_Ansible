# Required Parameters:
#   localLunIds:       a list of local LUN IDs
#   remoteLunIds:      a list of remote LUN IDs
#   mode:              replication mode, options: 1/sync, 2/async
#   remoteSn:          Remote Device SN, can be replaced with remoteDevId
#
# Optional Parameters:
#   remoteDevId:       remote device ID
#   recoveryPolicy:    recover policy, default: 1, options: 1/automatic, 2/manual
#   syncSpeed:         initial speed, default: 2, options: 1/low, 2/medium, 3/high, 4/highest
#
# Optional Parameters (async mode):
#   syncType:          synchronize type for async replication, default: 3, options: 1/manual, 2/wait after last sync begin, 3/wait after last sync ends
#   interval           synchronize interval in seconds (when syncType is not manual), default: 600, options: 10 ~ 86400
#   compress:          enable compress for async replication, default false, options: true, false
#   standby:           is standby or not, default: false, options: true/false
#
#
# Optional Parameters (sync mode):
#   timeout:           remote I/O timeout threshold in seconds, default: 10, options: 10~30, or set to 255 to disable timeout
#
# Generated Parameters:
#   newPairIds:        New Pair IDs

- set_fact:
    newPairIds: []

- block:
    - name: Query Remote Devices
      vars:
        queryId: "[? SN=='{{remoteSn}}'].ID"
      uri:
        url: "https://{{deviceHost}}:{{devicePort}}/deviceManager/rest/{{deviceSn}}/remote_device?range=[0-4096]&filter=ARRAYTYPE::1"
        method: GET
        validate_certs: no
        headers:
          Accept: "application/json"
          Content-Type: "application/json;charset=utf8"
          iBaseToken: "{{ deviceToken }}"
          Cookie: "session={{ deviceSession }}"
      register: REMOTE_DEVICES
      failed_when: ( 'data' not in REMOTE_DEVICES.json ) or (REMOTE_DEVICES.json.data | json_query(queryId) | length != 1)

    - set_fact:
        remoteDevId: "{{ REMOTE_DEVICES.json.data | json_query(queryId) | first}}"
      vars:
        queryId: "[? SN=='{{remoteSn}}'].ID"
  when: remoteSn|default(none) is not none

- set_fact:
    pairParams:
      REMOTEDEVICEID: "{{ remoteDevId }}"
      REPLICATIONMODEL: "{{ mode }}"
      SPEED: "{{ syncSpeed|default(GLOBAL.replication.syncSpeed) }}"
      RECOVERYPOLICY: "{{ recoveryPolicy|default(GLOBAL.replication.recoveryPolicy) }}"

- set_fact:
    pairParams: "{{ pairParams | combine( asyncParams ) }}"
  vars:
    asyncParams:
      SYNCHRONIZETYPE: "{{ syncType|default(GLOBAL.replication.syncType) }}"
      ENABLECOMPRESS: "{{ compress|default(GLOBAL.replication.compress) }}"
      TIMINGVAL: "{{ interval|default(GLOBAL.replication.interval) }}"
      ISSTANDBY: "{{ standby|default(False) }}"
  when:
    - mode|int == 2

- set_fact:
    pairParams: "{{ pairParams | combine( { 'REMTIMEOUTPERIOD': timeout|default(GLOBAL.replication.timeout) } ) }}"
  when:
    - mode|int == 1

- block:
    - set_fact:
        existPairIds: []
        existObjIds: []
        newPairIds: []

    - name: Check Exist Replication Pairs
      uri:
        url: "https://{{deviceHost}}:{{devicePort}}/deviceManager/rest/{{deviceSn}}/REPLICATIONPAIR?filter=LOCALRESID%3A%3A{{item.1}}%20and%20REMOTERESID%3A%3A{{remoteLunIds[item.0]}}"
        method: GET
        validate_certs: no
        headers:
          Accept: "application/json"
          Content-Type: "application/json;charset=utf8"
          iBaseToken: "{{ deviceToken }}"
          Cookie: "session={{ deviceSession }}"
      register: EXIST_PAIRS
      with_indexed_items: "{{ localLunIds }}"

    - name: Get Exist Pair IDs
      vars:
        queryPairId: "[? REMOTEDEVICEID=='{{remoteDevId}}'].ID"
        queryObjId: "[? REMOTEDEVICEID=='{{remoteDevId}}'].LOCALRESID"
      set_fact:
        existPairIds: "{{ existPairIds + EXIST_PAIRS.results[item.0].json.data | default([]) | json_query(queryPairId) }}"
        existObjIds: "{{ existObjIds + EXIST_PAIRS.results[item.0].json.data | default([]) | json_query(queryObjId) }}"
      with_indexed_items: "{{ localLunIds }}"

    - name: Create New Replication Pairs
      vars:
        resParams:
          LOCALRESID: "{{ item.1 }}"
          REMOTEDEVICEID: "{{ remoteDevId }}"
          REMOTERESID: "{{ remoteLunIds[item.0] }}"
      uri:
        url: "https://{{deviceHost}}:{{devicePort}}/deviceManager/rest/{{deviceSn}}/REPLICATIONPAIR"
        method: POST
        validate_certs: no
        headers:
          Accept: "application/json"
          Content-Type: "application/json;charset=utf8"
          iBaseToken: "{{ deviceToken }}"
          Cookie: "session={{ deviceSession }}"
        body_format: json
        body: "{{ pairParams | combine(resParams) }}"
      register: NEW_PAIRS
      when: item.1|string not in existObjIds
      with_indexed_items: "{{ localLunIds }}"

    - name: Check Create Pairs Results
      vars:
        queryError: "[*].json.error.code"
        queryMsg: "[*].json.error"
      debug:
        msg: "{{ NEW_PAIRS.results | json_query(queryMsg) }}"
      failed_when: NEW_PAIRS.results | json_query(queryError) | difference([0]) | length > 0

    - name: Get Replication Pair IDs
      vars:
        queryPairId: "[*].json.data.ID"
      set_fact:
        newPairIds: "{{ NEW_PAIRS.results | json_query(queryPairId) }}"
