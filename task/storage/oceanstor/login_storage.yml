# Include this tasks before operations on Storage Device API
# 
# Required Parameters:
#   deviceName:     Storage name define in global.yml STORAGES list, can be replace with deviceSn
#
# Optional Parameters:
#   deviceSn:       Storage SN define in global.yml STORAGES list
#   username:       Alternative username to login to storage
#   password:       Alternative password to login to storage

- name: Load Storage Auth Info with Device Name
  vars:
    querySn: "[? name=='{{deviceName}}'].sn"
    queryIpList: "[? name=='{{deviceName}}'].ipList"
    queryPort: "[? name=='{{deviceName}}'].port"
    queryUser: "[? name=='{{deviceName}}'].user"
    queryPswd: "[? name=='{{deviceName}}'].pswd"
  set_fact:
    deviceSn: "{{ STORAGES | json_query(querySn) | first }}"
    deviceIpList: "{{ STORAGES | json_query(queryIpList) | first }}"
    devicePort: "{{ STORAGES | json_query(queryPort) | first }}"
    deviceUser: "{{ username if (username|default(none) is not none) else STORAGES | json_query(queryUser) | first }}"
    devicePswd: "{{ password if (password|default(none) is not none) else STORAGES | json_query(queryPswd) | first }}"
  failed_when: STORAGES | json_query(querySn) | length != 1
  when: 
    - deviceName is defined
    - deviceSn is not defined

- name: Load Storage Auth Info with Device SN
  vars:
    queryName: "[? sn=='{{deviceSn}}'].name"
    queryIpList: "[? sn=='{{deviceSn}}'].ipList"
    queryPort: "[? sn=='{{deviceSn}}'].port"
    queryUser: "[? sn=='{{deviceSn}}'].user"
    queryPswd: "[? sn=='{{deviceSn}}'].pswd"
  set_fact:
    deviceName: "{{ STORAGES | json_query(queryName) | first }}"
    deviceIpList: "{{ STORAGES | json_query(queryIpList) | first }}"
    devicePort: "{{ STORAGES | json_query(queryPort) | first }}"
    deviceUser: "{{ username if (username|default(none) is not none) else STORAGES | json_query(queryUser) | first }}"
    devicePswd: "{{ password if (password|default(none) is not none) else STORAGES | json_query(queryPswd) | first }}"
  failed_when: STORAGES | json_query(queryName) | length != 1
  when: 
    - deviceSn is defined

- name: Check IP Address
  wait_for:
    host: "{{ item }}"
    port: "{{ devicePort }}"
    timeout: 1
  ignore_errors: true
  with_items: "{{ deviceIpList }}"
  register: CHECK_IP
  when: deviceIpList is defined

- name: Set Accessable IP
  vars:
    queryHost: "[? failed==`false`].item"
  set_fact:
    deviceHost: "{{ CHECK_IP.results | json_query(queryHost) | first }}"
  failed_when: CHECK_IP.results | json_query(queryHost) | length == 0
  when: deviceIpList is defined

- name: Load Tokens
  include_vars:
    file: "{{GLOBAL.baseDir}}/{{GLOBAL.tokenFile}}"
    name: TOKENS

- set_fact:
    tokenKey: "{{ (deviceHost + deviceUser + devicePswd) | hash('md5') }}"

- name: Set Token
  set_fact:
    deviceToken: "{{ TOKENS[tokenKey].token }}"
    deviceSession: "{{ TOKENS[tokenKey].session }}"
  when: tokenKey in TOKENS

- name: Valid Existing Session
  uri:
    url: "https://{{deviceHost}}:{{devicePort}}/deviceManager/rest/{{deviceSn}}/system/"
    method: GET
    validate_certs: no
    headers:
      Accept: "application/json"
      Content-Type: "application/json;charset=utf8"
      iBaseToken: "{{ deviceToken }}"
      Cookie: "session={{ deviceSession }}"
  register: SYSTEM
  ignore_errors: yes
  when: tokenKey in TOKENS

- name: Login to Storage
  uri:
    url: "https://{{deviceHost}}:{{devicePort}}/deviceManager/rest/xxxxx/sessions"
    method: POST
    validate_certs: no
    headers:
      Accept: "application/json"
      Content-Type: "application/json;charset=utf8"
    body_format: json
    body:
      username: "{{ deviceUser }}"
      password: "{{ devicePswd }}"
      scope: 0
  register: LOGIN
  failed_when: LOGIN.json.error.code|int != 0
  when: (tokenKey not in TOKENS) or (SYSTEM.json.error.code|int != 0)

- name: Update Token
  set_fact:
    deviceToken: "{{ LOGIN.json.data.iBaseToken }}"
    deviceSession: "{{ LOGIN.cookies.session }}"
  when:
    - (tokenKey not in TOKENS) or (SYSTEM.json.error.code|int != 0)
    - LOGIN.json.data.iBaseToken is defined

- name: Save Session
  local_action: copy content={{ TOKENS | combine( { tokenKey:{'token':deviceToken,'session':deviceSession} } ) }} dest={{GLOBAL.baseDir}}/{{GLOBAL.tokenFile}}
  when:
    - (tokenKey not in TOKENS) or (SYSTEM.json.error.code|int != 0)
    - LOGIN.json.data.iBaseToken is defined
