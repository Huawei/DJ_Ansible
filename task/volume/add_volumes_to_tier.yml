# Add volumes to tier
#
# Required parameters:
#   volumeNames:            a list of volume names, can be replaced with volumeIds
#   tierName:               service level name
#
# Optional parameters
#   filterDeviceId:         # query volume filter parameters
#
# Generated parameters (can be overwritten):
#   volumeIds:              a list of volume IDs
#   tierId:                 service level ID
#

- block:
    - set_fact:
        volumeIds: []
        filterByStorage: ""

    - set_fact:
        filterByStorage: "&storage_id={{filterDeviceId}}"
      when:
        - filterDeviceId is defined
        - filterDeviceId is not none

    - name: Query Volumes by Name
      uri:
        url: "https://{{djHost}}:{{djPort}}{{ DJSERVICE.API.volumes }}?name={{item}}{{filterByStorage}}"
        method: GET
        validate_certs: no
        headers:
          Accept: "application/json"
          Content-Type: "application/json;charset=utf8"
          X-Auth-Token: "{{djToken}}"
      register: VOLUMES
      with_items: "{{ volumeNames }}"

    - name: Get Volume IDs
      vars:
        queryVolumeId: "[? name=='{{item.1}}'].id"
      set_fact:
        volumeIds: "{{ volumeIds + VOLUMES.results[item.0].json.volumes | json_query(queryVolumeId) }}"
      with_indexed_items: "{{ volumeNames }}"

    - name: Check Volumes Exist
      debug:
        msg:
          volumeIds: "{{ volumeIds }}"
      failed_when: volumeIds|length < volumeNames|length
  when: 
    - volumeNames is defined
    - volumeNames is not none
    - volumeNames|length > 0

- block:
    - name: Query Tier by Name
      uri:
        url: "https://{{djHost}}:{{djPort}}{{ DJSERVICE.API.tiers }}?name={{tierName|urlencode}}"
        method: GET
        validate_certs: no
        headers:
          Accept: "application/json"
          Content-Type: "application/json;charset=utf8"
          X-Auth-Token: "{{djToken}}"
      register: TIER

    - name: Check Tier Exist
      vars:
        query: "[?name=='{{ tierName }}'].id"
      debug:
        msg:
          tierId: "{{ TIER.json['service-levels'] | json_query(query) }}"
      failed_when: TIER.json['service-levels'] | json_query(query) | length != 1

    - name: Get Tier ID
      vars:
        query: "[?name=='{{ tierName }}'].id"
      set_fact:
        tierId: "{{ TIER.json['service-levels'] | json_query(query) | first }}"

  when: 
    - tierName is defined
    - tierName is not none

- name: Add Volumes to Tier
  uri:
    url: "https://{{djHost}}:{{djPort}}{{ DJSERVICE.API.volumes }}/add-to-service-level"
    method: POST
    validate_certs: no
    headers:
      Accept: "application/json"
      Content-Type: "application/json;charset=utf8"
      X-Auth-Token: "{{djToken}}"
    status_code: 202
    body_format: json
    body: 
      service_level_id: "{{ tierId }}"
      attributes_auto_change: true
      volume_ids: "{{ volumeIds }}"
  register: ADD_TIER

- import_tasks: ../task/wait_task_complete.yml
  vars:
    taskId: "{{ ADD_TIER.json.task_id }}"
